//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the ekf_rio package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __ekf_rio__EKFRIOCONFIG_H__
#define __ekf_rio__EKFRIOCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ekf_rio
{
  class EkfRioConfigStatics;

  class EkfRioConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(EkfRioConfig &config, const EkfRioConfig &max, const EkfRioConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const EkfRioConfig &config1, const EkfRioConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, EkfRioConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const EkfRioConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, EkfRioConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const EkfRioConfig &config) const = 0;
      virtual void getValue(const EkfRioConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T EkfRioConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T EkfRioConfig::* field;

      virtual void clamp(EkfRioConfig &config, const EkfRioConfig &max, const EkfRioConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const EkfRioConfig &config1, const EkfRioConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, EkfRioConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const EkfRioConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, EkfRioConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const EkfRioConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const EkfRioConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, EkfRioConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, EkfRioConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<EkfRioConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class FILTER_MODE
{
  public:
    FILTER_MODE()
    {
      state = true;
      name = "Filter_Mode";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("frame_id"==(*_i)->name){frame_id = boost::any_cast<std::string>(val);}
        if("run_without_radar_trigger"==(*_i)->name){run_without_radar_trigger = boost::any_cast<bool>(val);}
      }
    }

    std::string frame_id;
bool run_without_radar_trigger;

    bool state;
    std::string name;

    
}filter_mode;

class SUBSCRIBERS
{
  public:
    SUBSCRIBERS()
    {
      state = true;
      name = "Subscribers";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("topic_imu"==(*_i)->name){topic_imu = boost::any_cast<std::string>(val);}
        if("topic_baro_altimeter"==(*_i)->name){topic_baro_altimeter = boost::any_cast<std::string>(val);}
        if("topic_radar_scan"==(*_i)->name){topic_radar_scan = boost::any_cast<std::string>(val);}
        if("topic_radar_trigger"==(*_i)->name){topic_radar_trigger = boost::any_cast<std::string>(val);}
      }
    }

    std::string topic_imu;
std::string topic_baro_altimeter;
std::string topic_radar_scan;
std::string topic_radar_trigger;

    bool state;
    std::string name;

    
}subscribers;

class PUBLISHERS
{
  public:
    PUBLISHERS()
    {
      state = true;
      name = "Publishers";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("publisher_rate"==(*_i)->name){publisher_rate = boost::any_cast<double>(val);}
        if("pose_path_publisher_rate"==(*_i)->name){pose_path_publisher_rate = boost::any_cast<double>(val);}
      }
    }

    double publisher_rate;
double pose_path_publisher_rate;

    bool state;
    std::string name;

    
}publishers;

class ROSBAG_MODE
{
  public:
    ROSBAG_MODE()
    {
      state = true;
      name = "Rosbag_Mode";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("rosbag_sleep_ms"==(*_i)->name){rosbag_sleep_ms = boost::any_cast<double>(val);}
        if("republish_ground_truth"==(*_i)->name){republish_ground_truth = boost::any_cast<bool>(val);}
        if("topic_ground_truth_pose"==(*_i)->name){topic_ground_truth_pose = boost::any_cast<std::string>(val);}
        if("topic_ground_truth_twist"==(*_i)->name){topic_ground_truth_twist = boost::any_cast<std::string>(val);}
        if("topic_ground_truth_twist_body"==(*_i)->name){topic_ground_truth_twist_body = boost::any_cast<std::string>(val);}
      }
    }

    double rosbag_sleep_ms;
bool republish_ground_truth;
std::string topic_ground_truth_pose;
std::string topic_ground_truth_twist;
std::string topic_ground_truth_twist_body;

    bool state;
    std::string name;

    
}rosbag_mode;

class KF_UPDATE
{
  public:
    KF_UPDATE()
    {
      state = true;
      name = "KF_Update";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("altimeter_update"==(*_i)->name){altimeter_update = boost::any_cast<bool>(val);}
        if("radar_update"==(*_i)->name){radar_update = boost::any_cast<bool>(val);}
        if("sigma_altimeter"==(*_i)->name){sigma_altimeter = boost::any_cast<double>(val);}
      }
    }

    bool altimeter_update;
bool radar_update;
double sigma_altimeter;

    bool state;
    std::string name;

    
}kf_update;

class RADAR_MEASUREMENT_MODEL
{
  public:
    RADAR_MEASUREMENT_MODEL()
    {
      state = true;
      name = "Radar_Measurement_Model";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("outlier_percentil_radar"==(*_i)->name){outlier_percentil_radar = boost::any_cast<double>(val);}
        if("use_w"==(*_i)->name){use_w = boost::any_cast<bool>(val);}
        if("radar_frame_ms"==(*_i)->name){radar_frame_ms = boost::any_cast<double>(val);}
        if("radar_rate"==(*_i)->name){radar_rate = boost::any_cast<double>(val);}
      }
    }

    double outlier_percentil_radar;
bool use_w;
double radar_frame_ms;
double radar_rate;

    bool state;
    std::string name;

    
}radar_measurement_model;

class INITIAL_NOMINAL_STATES
{
  public:
    INITIAL_NOMINAL_STATES()
    {
      state = true;
      name = "Initial_Nominal_States";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("p_0_x"==(*_i)->name){p_0_x = boost::any_cast<double>(val);}
        if("p_0_y"==(*_i)->name){p_0_y = boost::any_cast<double>(val);}
        if("p_0_z"==(*_i)->name){p_0_z = boost::any_cast<double>(val);}
        if("v_0_x"==(*_i)->name){v_0_x = boost::any_cast<double>(val);}
        if("v_0_y"==(*_i)->name){v_0_y = boost::any_cast<double>(val);}
        if("v_0_z"==(*_i)->name){v_0_z = boost::any_cast<double>(val);}
        if("yaw_0_deg"==(*_i)->name){yaw_0_deg = boost::any_cast<double>(val);}
        if("b_0_a_x"==(*_i)->name){b_0_a_x = boost::any_cast<double>(val);}
        if("b_0_a_y"==(*_i)->name){b_0_a_y = boost::any_cast<double>(val);}
        if("b_0_a_z"==(*_i)->name){b_0_a_z = boost::any_cast<double>(val);}
        if("b_0_w_x_deg"==(*_i)->name){b_0_w_x_deg = boost::any_cast<double>(val);}
        if("b_0_w_y_deg"==(*_i)->name){b_0_w_y_deg = boost::any_cast<double>(val);}
        if("b_0_w_z_deg"==(*_i)->name){b_0_w_z_deg = boost::any_cast<double>(val);}
        if("calib_gyro"==(*_i)->name){calib_gyro = boost::any_cast<bool>(val);}
        if("b_0_alt"==(*_i)->name){b_0_alt = boost::any_cast<double>(val);}
        if("l_b_r_x"==(*_i)->name){l_b_r_x = boost::any_cast<double>(val);}
        if("l_b_r_y"==(*_i)->name){l_b_r_y = boost::any_cast<double>(val);}
        if("l_b_r_z"==(*_i)->name){l_b_r_z = boost::any_cast<double>(val);}
        if("q_b_r_w"==(*_i)->name){q_b_r_w = boost::any_cast<double>(val);}
        if("q_b_r_x"==(*_i)->name){q_b_r_x = boost::any_cast<double>(val);}
        if("q_b_r_y"==(*_i)->name){q_b_r_y = boost::any_cast<double>(val);}
        if("q_b_r_z"==(*_i)->name){q_b_r_z = boost::any_cast<double>(val);}
        if("g_n"==(*_i)->name){g_n = boost::any_cast<double>(val);}
      }
    }

    double p_0_x;
double p_0_y;
double p_0_z;
double v_0_x;
double v_0_y;
double v_0_z;
double yaw_0_deg;
double b_0_a_x;
double b_0_a_y;
double b_0_a_z;
double b_0_w_x_deg;
double b_0_w_y_deg;
double b_0_w_z_deg;
bool calib_gyro;
double b_0_alt;
double l_b_r_x;
double l_b_r_y;
double l_b_r_z;
double q_b_r_w;
double q_b_r_x;
double q_b_r_y;
double q_b_r_z;
double g_n;

    bool state;
    std::string name;

    
}initial_nominal_states;

class INITIAL_UNCERTAINTY
{
  public:
    INITIAL_UNCERTAINTY()
    {
      state = true;
      name = "Initial_Uncertainty";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("sigma_p"==(*_i)->name){sigma_p = boost::any_cast<double>(val);}
        if("sigma_v"==(*_i)->name){sigma_v = boost::any_cast<double>(val);}
        if("sigma_roll_pitch_deg"==(*_i)->name){sigma_roll_pitch_deg = boost::any_cast<double>(val);}
        if("sigma_yaw_deg"==(*_i)->name){sigma_yaw_deg = boost::any_cast<double>(val);}
        if("sigma_b_a"==(*_i)->name){sigma_b_a = boost::any_cast<double>(val);}
        if("sigma_b_w_deg"==(*_i)->name){sigma_b_w_deg = boost::any_cast<double>(val);}
        if("sigma_b_alt"==(*_i)->name){sigma_b_alt = boost::any_cast<double>(val);}
        if("sigma_l_b_r_x"==(*_i)->name){sigma_l_b_r_x = boost::any_cast<double>(val);}
        if("sigma_l_b_r_y"==(*_i)->name){sigma_l_b_r_y = boost::any_cast<double>(val);}
        if("sigma_l_b_r_z"==(*_i)->name){sigma_l_b_r_z = boost::any_cast<double>(val);}
        if("sigma_eul_b_r_roll_deg"==(*_i)->name){sigma_eul_b_r_roll_deg = boost::any_cast<double>(val);}
        if("sigma_eul_b_r_pitch_deg"==(*_i)->name){sigma_eul_b_r_pitch_deg = boost::any_cast<double>(val);}
        if("sigma_eul_b_r_yaw_deg"==(*_i)->name){sigma_eul_b_r_yaw_deg = boost::any_cast<double>(val);}
      }
    }

    double sigma_p;
double sigma_v;
double sigma_roll_pitch_deg;
double sigma_yaw_deg;
double sigma_b_a;
double sigma_b_w_deg;
double sigma_b_alt;
double sigma_l_b_r_x;
double sigma_l_b_r_y;
double sigma_l_b_r_z;
double sigma_eul_b_r_roll_deg;
double sigma_eul_b_r_pitch_deg;
double sigma_eul_b_r_yaw_deg;

    bool state;
    std::string name;

    
}initial_uncertainty;

class NOISE_PSDS
{
  public:
    NOISE_PSDS()
    {
      state = true;
      name = "Noise_PSDs";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("noise_psd_a"==(*_i)->name){noise_psd_a = boost::any_cast<double>(val);}
        if("noise_psd_w_deg"==(*_i)->name){noise_psd_w_deg = boost::any_cast<double>(val);}
        if("noise_psd_b_a"==(*_i)->name){noise_psd_b_a = boost::any_cast<double>(val);}
        if("noise_psd_b_w_deg"==(*_i)->name){noise_psd_b_w_deg = boost::any_cast<double>(val);}
        if("noise_psd_b_alt"==(*_i)->name){noise_psd_b_alt = boost::any_cast<double>(val);}
      }
    }

    double noise_psd_a;
double noise_psd_w_deg;
double noise_psd_b_a;
double noise_psd_b_w_deg;
double noise_psd_b_alt;

    bool state;
    std::string name;

    
}noise_psds;

class INITIALIZATION
{
  public:
    INITIALIZATION()
    {
      state = true;
      name = "Initialization";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("T_init"==(*_i)->name){T_init = boost::any_cast<double>(val);}
      }
    }

    double T_init;

    bool state;
    std::string name;

    
}initialization;

class RADAR_EGO_VELOCITY_ESTIMATOR
{
  public:
    RADAR_EGO_VELOCITY_ESTIMATOR()
    {
      state = true;
      name = "Radar_Ego_Velocity_Estimator";
    }

    void setParams(EkfRioConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_dist"==(*_i)->name){min_dist = boost::any_cast<double>(val);}
        if("max_dist"==(*_i)->name){max_dist = boost::any_cast<double>(val);}
        if("min_db"==(*_i)->name){min_db = boost::any_cast<double>(val);}
        if("elevation_thresh_deg"==(*_i)->name){elevation_thresh_deg = boost::any_cast<double>(val);}
        if("azimuth_thresh_deg"==(*_i)->name){azimuth_thresh_deg = boost::any_cast<double>(val);}
        if("filter_min_z"==(*_i)->name){filter_min_z = boost::any_cast<double>(val);}
        if("filter_max_z"==(*_i)->name){filter_max_z = boost::any_cast<double>(val);}
        if("doppler_velocity_correction_factor"==(*_i)->name){doppler_velocity_correction_factor = boost::any_cast<double>(val);}
        if("thresh_zero_velocity"==(*_i)->name){thresh_zero_velocity = boost::any_cast<double>(val);}
        if("allowed_outlier_percentage"==(*_i)->name){allowed_outlier_percentage = boost::any_cast<double>(val);}
        if("sigma_zero_velocity_x"==(*_i)->name){sigma_zero_velocity_x = boost::any_cast<double>(val);}
        if("sigma_zero_velocity_y"==(*_i)->name){sigma_zero_velocity_y = boost::any_cast<double>(val);}
        if("sigma_zero_velocity_z"==(*_i)->name){sigma_zero_velocity_z = boost::any_cast<double>(val);}
        if("sigma_offset_radar_x"==(*_i)->name){sigma_offset_radar_x = boost::any_cast<double>(val);}
        if("sigma_offset_radar_y"==(*_i)->name){sigma_offset_radar_y = boost::any_cast<double>(val);}
        if("sigma_offset_radar_z"==(*_i)->name){sigma_offset_radar_z = boost::any_cast<double>(val);}
        if("max_sigma_x"==(*_i)->name){max_sigma_x = boost::any_cast<double>(val);}
        if("max_sigma_y"==(*_i)->name){max_sigma_y = boost::any_cast<double>(val);}
        if("max_sigma_z"==(*_i)->name){max_sigma_z = boost::any_cast<double>(val);}
        if("max_r_cond"==(*_i)->name){max_r_cond = boost::any_cast<double>(val);}
        if("use_cholesky_instead_of_bdcsvd"==(*_i)->name){use_cholesky_instead_of_bdcsvd = boost::any_cast<bool>(val);}
        if("use_ransac"==(*_i)->name){use_ransac = boost::any_cast<bool>(val);}
        if("outlier_prob"==(*_i)->name){outlier_prob = boost::any_cast<double>(val);}
        if("success_prob"==(*_i)->name){success_prob = boost::any_cast<double>(val);}
        if("N_ransac_points"==(*_i)->name){N_ransac_points = boost::any_cast<int>(val);}
        if("inlier_thresh"==(*_i)->name){inlier_thresh = boost::any_cast<double>(val);}
        if("use_odr"==(*_i)->name){use_odr = boost::any_cast<bool>(val);}
        if("min_speed_odr"==(*_i)->name){min_speed_odr = boost::any_cast<double>(val);}
        if("sigma_v_d"==(*_i)->name){sigma_v_d = boost::any_cast<double>(val);}
        if("model_noise_offset_deg"==(*_i)->name){model_noise_offset_deg = boost::any_cast<double>(val);}
        if("model_noise_scale_deg"==(*_i)->name){model_noise_scale_deg = boost::any_cast<double>(val);}
      }
    }

    double min_dist;
double max_dist;
double min_db;
double elevation_thresh_deg;
double azimuth_thresh_deg;
double filter_min_z;
double filter_max_z;
double doppler_velocity_correction_factor;
double thresh_zero_velocity;
double allowed_outlier_percentage;
double sigma_zero_velocity_x;
double sigma_zero_velocity_y;
double sigma_zero_velocity_z;
double sigma_offset_radar_x;
double sigma_offset_radar_y;
double sigma_offset_radar_z;
double max_sigma_x;
double max_sigma_y;
double max_sigma_z;
double max_r_cond;
bool use_cholesky_instead_of_bdcsvd;
bool use_ransac;
double outlier_prob;
double success_prob;
int N_ransac_points;
double inlier_thresh;
bool use_odr;
double min_speed_odr;
double sigma_v_d;
double model_noise_offset_deg;
double model_noise_scale_deg;

    bool state;
    std::string name;

    
}radar_ego_velocity_estimator;

}groups;



//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      std::string frame_id;
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      bool run_without_radar_trigger;
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      std::string topic_imu;
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      std::string topic_baro_altimeter;
//#line 17 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      std::string topic_radar_scan;
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      std::string topic_radar_trigger;
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double publisher_rate;
//#line 23 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double pose_path_publisher_rate;
//#line 27 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double rosbag_sleep_ms;
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      bool republish_ground_truth;
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      std::string topic_ground_truth_pose;
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      std::string topic_ground_truth_twist;
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      std::string topic_ground_truth_twist_body;
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      bool altimeter_update;
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      bool radar_update;
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_altimeter;
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double outlier_percentil_radar;
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      bool use_w;
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double radar_frame_ms;
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double radar_rate;
//#line 48 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double p_0_x;
//#line 49 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double p_0_y;
//#line 50 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double p_0_z;
//#line 52 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double v_0_x;
//#line 53 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double v_0_y;
//#line 54 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double v_0_z;
//#line 56 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double yaw_0_deg;
//#line 58 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double b_0_a_x;
//#line 59 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double b_0_a_y;
//#line 60 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double b_0_a_z;
//#line 62 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double b_0_w_x_deg;
//#line 63 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double b_0_w_y_deg;
//#line 64 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double b_0_w_z_deg;
//#line 65 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      bool calib_gyro;
//#line 67 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double b_0_alt;
//#line 69 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double l_b_r_x;
//#line 70 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double l_b_r_y;
//#line 71 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double l_b_r_z;
//#line 72 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double q_b_r_w;
//#line 73 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double q_b_r_x;
//#line 74 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double q_b_r_y;
//#line 75 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double q_b_r_z;
//#line 77 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double g_n;
//#line 81 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_p;
//#line 82 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_v;
//#line 83 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_roll_pitch_deg;
//#line 84 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_yaw_deg;
//#line 85 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_b_a;
//#line 86 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_b_w_deg;
//#line 87 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_b_alt;
//#line 89 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_l_b_r_x;
//#line 90 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_l_b_r_y;
//#line 91 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_l_b_r_z;
//#line 92 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_eul_b_r_roll_deg;
//#line 93 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_eul_b_r_pitch_deg;
//#line 94 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double sigma_eul_b_r_yaw_deg;
//#line 98 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double noise_psd_a;
//#line 99 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double noise_psd_w_deg;
//#line 100 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double noise_psd_b_a;
//#line 101 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double noise_psd_b_w_deg;
//#line 102 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double noise_psd_b_alt;
//#line 105 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      double T_init;
//#line 9 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double min_dist;
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_dist;
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double min_db;
//#line 12 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double elevation_thresh_deg;
//#line 13 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double azimuth_thresh_deg;
//#line 14 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double filter_min_z;
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double filter_max_z;
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double doppler_velocity_correction_factor;
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double thresh_zero_velocity;
//#line 19 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double allowed_outlier_percentage;
//#line 20 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_zero_velocity_x;
//#line 21 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_zero_velocity_y;
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_zero_velocity_z;
//#line 24 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_offset_radar_x;
//#line 25 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_offset_radar_y;
//#line 26 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_offset_radar_z;
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_sigma_x;
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_sigma_y;
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_sigma_z;
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_r_cond;
//#line 32 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      bool use_cholesky_instead_of_bdcsvd;
//#line 34 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      bool use_ransac;
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double outlier_prob;
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double success_prob;
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      int N_ransac_points;
//#line 38 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double inlier_thresh;
//#line 40 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      bool use_odr;
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double min_speed_odr;
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_v_d;
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double model_noise_offset_deg;
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double model_noise_scale_deg;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("EkfRioConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const EkfRioConfig &__max__ = __getMax__();
      const EkfRioConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const EkfRioConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const EkfRioConfig &__getDefault__();
    static const EkfRioConfig &__getMax__();
    static const EkfRioConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const EkfRioConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void EkfRioConfig::ParamDescription<std::string>::clamp(EkfRioConfig &config, const EkfRioConfig &max, const EkfRioConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class EkfRioConfigStatics
  {
    friend class EkfRioConfig;

    EkfRioConfigStatics()
    {
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT, EkfRioConfig> Default("Default", "", 0, 0, true, &EkfRioConfig::groups);
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::FILTER_MODE, EkfRioConfig::DEFAULT> Filter_Mode("Filter_Mode", "", 0, 1, true, &EkfRioConfig::DEFAULT::filter_mode);
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.frame_id = "";
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.frame_id = "";
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.frame_id = "odom";
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Filter_Mode.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("frame_id", "str", 0, "Frame of estimated pose", "", &EkfRioConfig::frame_id)));
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("frame_id", "str", 0, "Frame of estimated pose", "", &EkfRioConfig::frame_id)));
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.run_without_radar_trigger = 0;
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.run_without_radar_trigger = 1;
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.run_without_radar_trigger = 0;
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Filter_Mode.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("run_without_radar_trigger", "bool", 0, "Run ekf_rio w/o trigger message (radar scan header stamp is used only, might yield worse results)", "", &EkfRioConfig::run_without_radar_trigger)));
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("run_without_radar_trigger", "bool", 0, "Run ekf_rio w/o trigger message (radar scan header stamp is used only, might yield worse results)", "", &EkfRioConfig::run_without_radar_trigger)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Filter_Mode.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::FILTER_MODE, EkfRioConfig::DEFAULT>(Filter_Mode)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::FILTER_MODE, EkfRioConfig::DEFAULT>(Filter_Mode)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::SUBSCRIBERS, EkfRioConfig::DEFAULT> Subscribers("Subscribers", "", 0, 2, true, &EkfRioConfig::DEFAULT::subscribers);
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.topic_imu = "";
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.topic_imu = "";
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.topic_imu = "empty";
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Subscribers.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_imu", "str", 0, "Topic imu", "", &EkfRioConfig::topic_imu)));
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_imu", "str", 0, "Topic imu", "", &EkfRioConfig::topic_imu)));
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.topic_baro_altimeter = "";
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.topic_baro_altimeter = "";
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.topic_baro_altimeter = "empty";
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Subscribers.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_baro_altimeter", "str", 0, "Topic baro altimeter", "", &EkfRioConfig::topic_baro_altimeter)));
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_baro_altimeter", "str", 0, "Topic baro altimeter", "", &EkfRioConfig::topic_baro_altimeter)));
//#line 17 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.topic_radar_scan = "";
//#line 17 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.topic_radar_scan = "";
//#line 17 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.topic_radar_scan = "empty";
//#line 17 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Subscribers.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_radar_scan", "str", 0, "Topic radar scan", "", &EkfRioConfig::topic_radar_scan)));
//#line 17 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_radar_scan", "str", 0, "Topic radar scan", "", &EkfRioConfig::topic_radar_scan)));
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.topic_radar_trigger = "";
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.topic_radar_trigger = "";
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.topic_radar_trigger = "empty";
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Subscribers.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_radar_trigger", "str", 0, "Topic radar data trigger", "", &EkfRioConfig::topic_radar_trigger)));
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_radar_trigger", "str", 0, "Topic radar data trigger", "", &EkfRioConfig::topic_radar_trigger)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Subscribers.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::SUBSCRIBERS, EkfRioConfig::DEFAULT>(Subscribers)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::SUBSCRIBERS, EkfRioConfig::DEFAULT>(Subscribers)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::PUBLISHERS, EkfRioConfig::DEFAULT> Publishers("Publishers", "", 0, 3, true, &EkfRioConfig::DEFAULT::publishers);
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.publisher_rate = 0.0;
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.publisher_rate = 420.0;
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.publisher_rate = 1.0;
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Publishers.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("publisher_rate", "double", 0, "Publisher rate of navigation filter", "", &EkfRioConfig::publisher_rate)));
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("publisher_rate", "double", 0, "Publisher rate of navigation filter", "", &EkfRioConfig::publisher_rate)));
//#line 23 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.pose_path_publisher_rate = 0.0;
//#line 23 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.pose_path_publisher_rate = 50.0;
//#line 23 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.pose_path_publisher_rate = 1.0;
//#line 23 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Publishers.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("pose_path_publisher_rate", "double", 0, "Publisher rate of pose path filter", "", &EkfRioConfig::pose_path_publisher_rate)));
//#line 23 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("pose_path_publisher_rate", "double", 0, "Publisher rate of pose path filter", "", &EkfRioConfig::pose_path_publisher_rate)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Publishers.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::PUBLISHERS, EkfRioConfig::DEFAULT>(Publishers)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::PUBLISHERS, EkfRioConfig::DEFAULT>(Publishers)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::ROSBAG_MODE, EkfRioConfig::DEFAULT> Rosbag_Mode("Rosbag_Mode", "", 0, 4, true, &EkfRioConfig::DEFAULT::rosbag_mode);
//#line 27 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.rosbag_sleep_ms = -100.0;
//#line 27 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.rosbag_sleep_ms = 100.0;
//#line 27 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.rosbag_sleep_ms = 0.01;
//#line 27 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Rosbag_Mode.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("rosbag_sleep_ms", "double", 0, "Sleep of each iteration in rosbag mode --> useful slow down in rosbag mode", "", &EkfRioConfig::rosbag_sleep_ms)));
//#line 27 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("rosbag_sleep_ms", "double", 0, "Sleep of each iteration in rosbag mode --> useful slow down in rosbag mode", "", &EkfRioConfig::rosbag_sleep_ms)));
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.republish_ground_truth = 0;
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.republish_ground_truth = 1;
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.republish_ground_truth = 0;
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Rosbag_Mode.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("republish_ground_truth", "bool", 0, "Publish ground truth topics --> useful when using the rosbag mode with python evaluation", "", &EkfRioConfig::republish_ground_truth)));
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("republish_ground_truth", "bool", 0, "Publish ground truth topics --> useful when using the rosbag mode with python evaluation", "", &EkfRioConfig::republish_ground_truth)));
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.topic_ground_truth_pose = "";
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.topic_ground_truth_pose = "";
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.topic_ground_truth_pose = "/ground_truth/pose";
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Rosbag_Mode.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_ground_truth_pose", "str", 0, "Ground truth pose topic which will be republished", "", &EkfRioConfig::topic_ground_truth_pose)));
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_ground_truth_pose", "str", 0, "Ground truth pose topic which will be republished", "", &EkfRioConfig::topic_ground_truth_pose)));
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.topic_ground_truth_twist = "";
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.topic_ground_truth_twist = "";
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.topic_ground_truth_twist = "/ground_truth/twist";
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Rosbag_Mode.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_ground_truth_twist", "str", 0, "Ground truth twist topic which will be republished", "", &EkfRioConfig::topic_ground_truth_twist)));
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_ground_truth_twist", "str", 0, "Ground truth twist topic which will be republished", "", &EkfRioConfig::topic_ground_truth_twist)));
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.topic_ground_truth_twist_body = "";
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.topic_ground_truth_twist_body = "";
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.topic_ground_truth_twist_body = "/ground_truth/twist_body";
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Rosbag_Mode.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_ground_truth_twist_body", "str", 0, "Ground truth twist of body frame topic which will be republished", "", &EkfRioConfig::topic_ground_truth_twist_body)));
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<std::string>("topic_ground_truth_twist_body", "str", 0, "Ground truth twist of body frame topic which will be republished", "", &EkfRioConfig::topic_ground_truth_twist_body)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Rosbag_Mode.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::ROSBAG_MODE, EkfRioConfig::DEFAULT>(Rosbag_Mode)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::ROSBAG_MODE, EkfRioConfig::DEFAULT>(Rosbag_Mode)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::KF_UPDATE, EkfRioConfig::DEFAULT> KF_Update("KF_Update", "", 0, 5, true, &EkfRioConfig::DEFAULT::kf_update);
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.altimeter_update = 0;
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.altimeter_update = 1;
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.altimeter_update = 0;
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      KF_Update.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("altimeter_update", "bool", 0, "enable altimeter update", "", &EkfRioConfig::altimeter_update)));
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("altimeter_update", "bool", 0, "enable altimeter update", "", &EkfRioConfig::altimeter_update)));
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.radar_update = 0;
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.radar_update = 1;
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.radar_update = 0;
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      KF_Update.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("radar_update", "bool", 0, "Enable radar update", "", &EkfRioConfig::radar_update)));
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("radar_update", "bool", 0, "Enable radar update", "", &EkfRioConfig::radar_update)));
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_altimeter = 0.0;
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_altimeter = 10.0;
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_altimeter = 1.0;
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      KF_Update.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_altimeter", "double", 0, "Sigma of altimeter measurement", "", &EkfRioConfig::sigma_altimeter)));
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_altimeter", "double", 0, "Sigma of altimeter measurement", "", &EkfRioConfig::sigma_altimeter)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      KF_Update.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::KF_UPDATE, EkfRioConfig::DEFAULT>(KF_Update)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::KF_UPDATE, EkfRioConfig::DEFAULT>(KF_Update)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::RADAR_MEASUREMENT_MODEL, EkfRioConfig::DEFAULT> Radar_Measurement_Model("Radar_Measurement_Model", "", 0, 6, true, &EkfRioConfig::DEFAULT::radar_measurement_model);
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.outlier_percentil_radar = 0.0;
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.outlier_percentil_radar = 10.0;
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.outlier_percentil_radar = 0.25;
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Radar_Measurement_Model.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("outlier_percentil_radar", "double", 0, "Percentil of chi^2 distribution for Mahalnobis distance outlier rejection", "", &EkfRioConfig::outlier_percentil_radar)));
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("outlier_percentil_radar", "double", 0, "Percentil of chi^2 distribution for Mahalnobis distance outlier rejection", "", &EkfRioConfig::outlier_percentil_radar)));
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.use_w = 0;
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.use_w = 1;
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.use_w = 1;
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Radar_Measurement_Model.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("use_w", "bool", 0, "Use omega to compensate for lever arm of radar", "", &EkfRioConfig::use_w)));
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("use_w", "bool", 0, "Use omega to compensate for lever arm of radar", "", &EkfRioConfig::use_w)));
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.radar_frame_ms = 0.0;
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.radar_frame_ms = 1000.0;
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.radar_frame_ms = 0.0;
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Radar_Measurement_Model.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("radar_frame_ms", "double", 0, "Length of each radar frame (=exposure time of radar scan) in milliseconds", "", &EkfRioConfig::radar_frame_ms)));
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("radar_frame_ms", "double", 0, "Length of each radar frame (=exposure time of radar scan) in milliseconds", "", &EkfRioConfig::radar_frame_ms)));
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.radar_rate = 0.0;
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.radar_rate = 100.0;
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.radar_rate = 10.0;
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Radar_Measurement_Model.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("radar_rate", "double", 0, "Nominal update rate of radar", "", &EkfRioConfig::radar_rate)));
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("radar_rate", "double", 0, "Nominal update rate of radar", "", &EkfRioConfig::radar_rate)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Radar_Measurement_Model.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::RADAR_MEASUREMENT_MODEL, EkfRioConfig::DEFAULT>(Radar_Measurement_Model)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::RADAR_MEASUREMENT_MODEL, EkfRioConfig::DEFAULT>(Radar_Measurement_Model)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIAL_NOMINAL_STATES, EkfRioConfig::DEFAULT> Initial_Nominal_States("Initial_Nominal_States", "", 0, 7, true, &EkfRioConfig::DEFAULT::initial_nominal_states);
//#line 48 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.p_0_x = -100.0;
//#line 48 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.p_0_x = 100.0;
//#line 48 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.p_0_x = 0.0;
//#line 48 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("p_0_x", "double", 0, "initial pos x^n in [m]", "", &EkfRioConfig::p_0_x)));
//#line 48 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("p_0_x", "double", 0, "initial pos x^n in [m]", "", &EkfRioConfig::p_0_x)));
//#line 49 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.p_0_y = -100.0;
//#line 49 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.p_0_y = 100.0;
//#line 49 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.p_0_y = 0.0;
//#line 49 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("p_0_y", "double", 0, "initial pos y^n in [m]", "", &EkfRioConfig::p_0_y)));
//#line 49 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("p_0_y", "double", 0, "initial pos y^n in [m]", "", &EkfRioConfig::p_0_y)));
//#line 50 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.p_0_z = -100.0;
//#line 50 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.p_0_z = 100.0;
//#line 50 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.p_0_z = 0.0;
//#line 50 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("p_0_z", "double", 0, "initial pos z^n in [m]", "", &EkfRioConfig::p_0_z)));
//#line 50 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("p_0_z", "double", 0, "initial pos z^n in [m]", "", &EkfRioConfig::p_0_z)));
//#line 52 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.v_0_x = -5.0;
//#line 52 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.v_0_x = 5.0;
//#line 52 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.v_0_x = 0.0;
//#line 52 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("v_0_x", "double", 0, "initial vel x^n in [m/2]", "", &EkfRioConfig::v_0_x)));
//#line 52 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("v_0_x", "double", 0, "initial vel x^n in [m/2]", "", &EkfRioConfig::v_0_x)));
//#line 53 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.v_0_y = -5.0;
//#line 53 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.v_0_y = 5.0;
//#line 53 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.v_0_y = 0.0;
//#line 53 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("v_0_y", "double", 0, "initial vel y^n in [m/2]", "", &EkfRioConfig::v_0_y)));
//#line 53 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("v_0_y", "double", 0, "initial vel y^n in [m/2]", "", &EkfRioConfig::v_0_y)));
//#line 54 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.v_0_z = -5.0;
//#line 54 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.v_0_z = 5.0;
//#line 54 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.v_0_z = 0.0;
//#line 54 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("v_0_z", "double", 0, "initial vel z^n in [m/2]", "", &EkfRioConfig::v_0_z)));
//#line 54 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("v_0_z", "double", 0, "initial vel z^n in [m/2]", "", &EkfRioConfig::v_0_z)));
//#line 56 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.yaw_0_deg = -360.0;
//#line 56 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.yaw_0_deg = 360.0;
//#line 56 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.yaw_0_deg = 0.0;
//#line 56 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("yaw_0_deg", "double", 0, "initial yaw in [deg]", "", &EkfRioConfig::yaw_0_deg)));
//#line 56 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("yaw_0_deg", "double", 0, "initial yaw in [deg]", "", &EkfRioConfig::yaw_0_deg)));
//#line 58 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.b_0_a_x = -2.0;
//#line 58 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.b_0_a_x = 2.0;
//#line 58 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.b_0_a_x = 0.0;
//#line 58 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_a_x", "double", 0, "initial bias acc x^b in [m/s^2]", "", &EkfRioConfig::b_0_a_x)));
//#line 58 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_a_x", "double", 0, "initial bias acc x^b in [m/s^2]", "", &EkfRioConfig::b_0_a_x)));
//#line 59 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.b_0_a_y = -2.0;
//#line 59 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.b_0_a_y = 2.0;
//#line 59 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.b_0_a_y = 0.0;
//#line 59 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_a_y", "double", 0, "initial bias acc y^b in [m/s^2]", "", &EkfRioConfig::b_0_a_y)));
//#line 59 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_a_y", "double", 0, "initial bias acc y^b in [m/s^2]", "", &EkfRioConfig::b_0_a_y)));
//#line 60 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.b_0_a_z = -2.0;
//#line 60 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.b_0_a_z = 2.0;
//#line 60 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.b_0_a_z = 0.0;
//#line 60 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_a_z", "double", 0, "initial bias acc z^b in [m/s^2]", "", &EkfRioConfig::b_0_a_z)));
//#line 60 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_a_z", "double", 0, "initial bias acc z^b in [m/s^2]", "", &EkfRioConfig::b_0_a_z)));
//#line 62 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.b_0_w_x_deg = -1.0;
//#line 62 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.b_0_w_x_deg = 1.0;
//#line 62 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.b_0_w_x_deg = 0.0;
//#line 62 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_w_x_deg", "double", 0, "initial bias omega x^b in [deg/s]", "", &EkfRioConfig::b_0_w_x_deg)));
//#line 62 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_w_x_deg", "double", 0, "initial bias omega x^b in [deg/s]", "", &EkfRioConfig::b_0_w_x_deg)));
//#line 63 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.b_0_w_y_deg = -1.0;
//#line 63 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.b_0_w_y_deg = 1.0;
//#line 63 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.b_0_w_y_deg = 0.0;
//#line 63 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_w_y_deg", "double", 0, "initial bias omega y^b in [deg/s]", "", &EkfRioConfig::b_0_w_y_deg)));
//#line 63 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_w_y_deg", "double", 0, "initial bias omega y^b in [deg/s]", "", &EkfRioConfig::b_0_w_y_deg)));
//#line 64 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.b_0_w_z_deg = -1.0;
//#line 64 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.b_0_w_z_deg = 1.0;
//#line 64 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.b_0_w_z_deg = 0.0;
//#line 64 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_w_z_deg", "double", 0, "initial bias omega z^b in [deg/s]", "", &EkfRioConfig::b_0_w_z_deg)));
//#line 64 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_w_z_deg", "double", 0, "initial bias omega z^b in [deg/s]", "", &EkfRioConfig::b_0_w_z_deg)));
//#line 65 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.calib_gyro = 0;
//#line 65 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.calib_gyro = 1;
//#line 65 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.calib_gyro = 1;
//#line 65 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("calib_gyro", "bool", 0, "calib gyro", "", &EkfRioConfig::calib_gyro)));
//#line 65 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("calib_gyro", "bool", 0, "calib gyro", "", &EkfRioConfig::calib_gyro)));
//#line 67 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.b_0_alt = -100.0;
//#line 67 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.b_0_alt = 100.0;
//#line 67 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.b_0_alt = 0.0;
//#line 67 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_alt", "double", 0, "initial bias altimeter x^n in [m]", "", &EkfRioConfig::b_0_alt)));
//#line 67 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("b_0_alt", "double", 0, "initial bias altimeter x^n in [m]", "", &EkfRioConfig::b_0_alt)));
//#line 69 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.l_b_r_x = -1.0;
//#line 69 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.l_b_r_x = 1.0;
//#line 69 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.l_b_r_x = 0.0;
//#line 69 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("l_b_r_x", "double", 0, "x-translation body to radar expressed in body frame", "", &EkfRioConfig::l_b_r_x)));
//#line 69 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("l_b_r_x", "double", 0, "x-translation body to radar expressed in body frame", "", &EkfRioConfig::l_b_r_x)));
//#line 70 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.l_b_r_y = -1.0;
//#line 70 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.l_b_r_y = 1.0;
//#line 70 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.l_b_r_y = 0.0;
//#line 70 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("l_b_r_y", "double", 0, "y-translation body to radar expressed in body frame", "", &EkfRioConfig::l_b_r_y)));
//#line 70 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("l_b_r_y", "double", 0, "y-translation body to radar expressed in body frame", "", &EkfRioConfig::l_b_r_y)));
//#line 71 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.l_b_r_z = -1.0;
//#line 71 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.l_b_r_z = 1.0;
//#line 71 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.l_b_r_z = 0.0;
//#line 71 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("l_b_r_z", "double", 0, "z-translation body to radar expressed in body frame", "", &EkfRioConfig::l_b_r_z)));
//#line 71 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("l_b_r_z", "double", 0, "z-translation body to radar expressed in body frame", "", &EkfRioConfig::l_b_r_z)));
//#line 72 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.q_b_r_w = -1.0;
//#line 72 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.q_b_r_w = 1.0;
//#line 72 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.q_b_r_w = 0.0;
//#line 72 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("q_b_r_w", "double", 0, "rotation radar frame to body frame", "", &EkfRioConfig::q_b_r_w)));
//#line 72 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("q_b_r_w", "double", 0, "rotation radar frame to body frame", "", &EkfRioConfig::q_b_r_w)));
//#line 73 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.q_b_r_x = -1.0;
//#line 73 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.q_b_r_x = 1.0;
//#line 73 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.q_b_r_x = 0.0;
//#line 73 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("q_b_r_x", "double", 0, "rotation radar frame to body frame", "", &EkfRioConfig::q_b_r_x)));
//#line 73 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("q_b_r_x", "double", 0, "rotation radar frame to body frame", "", &EkfRioConfig::q_b_r_x)));
//#line 74 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.q_b_r_y = -1.0;
//#line 74 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.q_b_r_y = 1.0;
//#line 74 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.q_b_r_y = 0.0;
//#line 74 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("q_b_r_y", "double", 0, "rotation radar frame to body frame", "", &EkfRioConfig::q_b_r_y)));
//#line 74 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("q_b_r_y", "double", 0, "rotation radar frame to body frame", "", &EkfRioConfig::q_b_r_y)));
//#line 75 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.q_b_r_z = -1.0;
//#line 75 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.q_b_r_z = 1.0;
//#line 75 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.q_b_r_z = 0.0;
//#line 75 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("q_b_r_z", "double", 0, "rotation radar frame to body frame", "", &EkfRioConfig::q_b_r_z)));
//#line 75 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("q_b_r_z", "double", 0, "rotation radar frame to body frame", "", &EkfRioConfig::q_b_r_z)));
//#line 77 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.g_n = 0.0;
//#line 77 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.g_n = 10.0;
//#line 77 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.g_n = 9.81;
//#line 77 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Nominal_States.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("g_n", "double", 0, "initial gravity g^n in [m/s^2]", "", &EkfRioConfig::g_n)));
//#line 77 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("g_n", "double", 0, "initial gravity g^n in [m/s^2]", "", &EkfRioConfig::g_n)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Initial_Nominal_States.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIAL_NOMINAL_STATES, EkfRioConfig::DEFAULT>(Initial_Nominal_States)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIAL_NOMINAL_STATES, EkfRioConfig::DEFAULT>(Initial_Nominal_States)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIAL_UNCERTAINTY, EkfRioConfig::DEFAULT> Initial_Uncertainty("Initial_Uncertainty", "", 0, 8, true, &EkfRioConfig::DEFAULT::initial_uncertainty);
//#line 81 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_p = 0.0;
//#line 81 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_p = 1000.0;
//#line 81 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_p = 0.0;
//#line 81 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_p", "double", 0, "initial sigma pos^n in [m]", "", &EkfRioConfig::sigma_p)));
//#line 81 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_p", "double", 0, "initial sigma pos^n in [m]", "", &EkfRioConfig::sigma_p)));
//#line 82 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_v = 0.0;
//#line 82 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_v = 1000.0;
//#line 82 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_v = 0.0;
//#line 82 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_v", "double", 0, "initial sigma vel^n in [m/s]", "", &EkfRioConfig::sigma_v)));
//#line 82 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_v", "double", 0, "initial sigma vel^n in [m/s]", "", &EkfRioConfig::sigma_v)));
//#line 83 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_roll_pitch_deg = 0.0;
//#line 83 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_roll_pitch_deg = 360.0;
//#line 83 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_roll_pitch_deg = 1.0;
//#line 83 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_roll_pitch_deg", "double", 0, "initial sigma roll and pitch in [deg]", "", &EkfRioConfig::sigma_roll_pitch_deg)));
//#line 83 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_roll_pitch_deg", "double", 0, "initial sigma roll and pitch in [deg]", "", &EkfRioConfig::sigma_roll_pitch_deg)));
//#line 84 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_yaw_deg = 0.0;
//#line 84 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_yaw_deg = 360.0;
//#line 84 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_yaw_deg = 1.0;
//#line 84 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_yaw_deg", "double", 0, "initial sigma yaw in [deg]", "", &EkfRioConfig::sigma_yaw_deg)));
//#line 84 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_yaw_deg", "double", 0, "initial sigma yaw in [deg]", "", &EkfRioConfig::sigma_yaw_deg)));
//#line 85 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_b_a = 0.0;
//#line 85 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_b_a = 1.0;
//#line 85 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_b_a = 0.01;
//#line 85 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_b_a", "double", 0, "initial sigma bias acc^b in [m/s^2]", "", &EkfRioConfig::sigma_b_a)));
//#line 85 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_b_a", "double", 0, "initial sigma bias acc^b in [m/s^2]", "", &EkfRioConfig::sigma_b_a)));
//#line 86 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_b_w_deg = 0.0;
//#line 86 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_b_w_deg = 1.0;
//#line 86 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_b_w_deg = 0.00035;
//#line 86 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_b_w_deg", "double", 0, "initial sigma bias omega^b in [deg/s]", "", &EkfRioConfig::sigma_b_w_deg)));
//#line 86 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_b_w_deg", "double", 0, "initial sigma bias omega^b in [deg/s]", "", &EkfRioConfig::sigma_b_w_deg)));
//#line 87 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_b_alt = 0.0;
//#line 87 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_b_alt = 1000.0;
//#line 87 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_b_alt = 0.0;
//#line 87 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_b_alt", "double", 0, "initial sigma alt^n in [m]", "", &EkfRioConfig::sigma_b_alt)));
//#line 87 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_b_alt", "double", 0, "initial sigma alt^n in [m]", "", &EkfRioConfig::sigma_b_alt)));
//#line 89 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_l_b_r_x = 0.0;
//#line 89 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_l_b_r_x = 1.0;
//#line 89 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_l_b_r_x = 0.0;
//#line 89 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_l_b_r_x", "double", 0, "initial sigma l_b_r [m]", "", &EkfRioConfig::sigma_l_b_r_x)));
//#line 89 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_l_b_r_x", "double", 0, "initial sigma l_b_r [m]", "", &EkfRioConfig::sigma_l_b_r_x)));
//#line 90 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_l_b_r_y = 0.0;
//#line 90 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_l_b_r_y = 1.0;
//#line 90 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_l_b_r_y = 0.0;
//#line 90 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_l_b_r_y", "double", 0, "initial sigma l_b_r [m]", "", &EkfRioConfig::sigma_l_b_r_y)));
//#line 90 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_l_b_r_y", "double", 0, "initial sigma l_b_r [m]", "", &EkfRioConfig::sigma_l_b_r_y)));
//#line 91 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_l_b_r_z = 0.0;
//#line 91 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_l_b_r_z = 1.0;
//#line 91 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_l_b_r_z = 0.0;
//#line 91 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_l_b_r_z", "double", 0, "initial sigma l_b_r [m]", "", &EkfRioConfig::sigma_l_b_r_z)));
//#line 91 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_l_b_r_z", "double", 0, "initial sigma l_b_r [m]", "", &EkfRioConfig::sigma_l_b_r_z)));
//#line 92 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_eul_b_r_roll_deg = 0.0;
//#line 92 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_eul_b_r_roll_deg = 360.0;
//#line 92 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_eul_b_r_roll_deg = 0.0;
//#line 92 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_eul_b_r_roll_deg", "double", 0, "initial sigma eul_b_r [deg]", "", &EkfRioConfig::sigma_eul_b_r_roll_deg)));
//#line 92 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_eul_b_r_roll_deg", "double", 0, "initial sigma eul_b_r [deg]", "", &EkfRioConfig::sigma_eul_b_r_roll_deg)));
//#line 93 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_eul_b_r_pitch_deg = 0.0;
//#line 93 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_eul_b_r_pitch_deg = 360.0;
//#line 93 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_eul_b_r_pitch_deg = 0.0;
//#line 93 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_eul_b_r_pitch_deg", "double", 0, "initial sigma eul_b_r [deg]", "", &EkfRioConfig::sigma_eul_b_r_pitch_deg)));
//#line 93 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_eul_b_r_pitch_deg", "double", 0, "initial sigma eul_b_r [deg]", "", &EkfRioConfig::sigma_eul_b_r_pitch_deg)));
//#line 94 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.sigma_eul_b_r_yaw_deg = 0.0;
//#line 94 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.sigma_eul_b_r_yaw_deg = 360.0;
//#line 94 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.sigma_eul_b_r_yaw_deg = 0.0;
//#line 94 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initial_Uncertainty.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_eul_b_r_yaw_deg", "double", 0, "initial sigma eul_b_r [deg]", "", &EkfRioConfig::sigma_eul_b_r_yaw_deg)));
//#line 94 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_eul_b_r_yaw_deg", "double", 0, "initial sigma eul_b_r [deg]", "", &EkfRioConfig::sigma_eul_b_r_yaw_deg)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Initial_Uncertainty.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIAL_UNCERTAINTY, EkfRioConfig::DEFAULT>(Initial_Uncertainty)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIAL_UNCERTAINTY, EkfRioConfig::DEFAULT>(Initial_Uncertainty)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::NOISE_PSDS, EkfRioConfig::DEFAULT> Noise_PSDs("Noise_PSDs", "", 0, 9, true, &EkfRioConfig::DEFAULT::noise_psds);
//#line 98 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.noise_psd_a = 0.0;
//#line 98 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.noise_psd_a = 1.0;
//#line 98 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.noise_psd_a = 0.03;
//#line 98 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Noise_PSDs.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_a", "double", 0, "noise psd acc^b in [m/s^2]", "", &EkfRioConfig::noise_psd_a)));
//#line 98 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_a", "double", 0, "noise psd acc^b in [m/s^2]", "", &EkfRioConfig::noise_psd_a)));
//#line 99 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.noise_psd_w_deg = 0.0;
//#line 99 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.noise_psd_w_deg = 1.0;
//#line 99 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.noise_psd_w_deg = 0.18;
//#line 99 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Noise_PSDs.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_w_deg", "double", 0, "noise psd omega^b in [deg/s]", "", &EkfRioConfig::noise_psd_w_deg)));
//#line 99 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_w_deg", "double", 0, "noise psd omega^b in [deg/s]", "", &EkfRioConfig::noise_psd_w_deg)));
//#line 100 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.noise_psd_b_a = 0.0;
//#line 100 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.noise_psd_b_a = 1.0;
//#line 100 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.noise_psd_b_a = 0.03;
//#line 100 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Noise_PSDs.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_b_a", "double", 0, "noise psd bias acc^b in [m/s^2]", "", &EkfRioConfig::noise_psd_b_a)));
//#line 100 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_b_a", "double", 0, "noise psd bias acc^b in [m/s^2]", "", &EkfRioConfig::noise_psd_b_a)));
//#line 101 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.noise_psd_b_w_deg = 0.0;
//#line 101 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.noise_psd_b_w_deg = 1.0;
//#line 101 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.noise_psd_b_w_deg = 0.01;
//#line 101 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Noise_PSDs.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_b_w_deg", "double", 0, "noise psd bias omega^b in [deg/s]", "", &EkfRioConfig::noise_psd_b_w_deg)));
//#line 101 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_b_w_deg", "double", 0, "noise psd bias omega^b in [deg/s]", "", &EkfRioConfig::noise_psd_b_w_deg)));
//#line 102 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.noise_psd_b_alt = 0.0;
//#line 102 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.noise_psd_b_alt = 1.0;
//#line 102 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.noise_psd_b_alt = 0.01;
//#line 102 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Noise_PSDs.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_b_alt", "double", 0, "noise psd altimeter bias in [m]", "", &EkfRioConfig::noise_psd_b_alt)));
//#line 102 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("noise_psd_b_alt", "double", 0, "noise psd altimeter bias in [m]", "", &EkfRioConfig::noise_psd_b_alt)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Noise_PSDs.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::NOISE_PSDS, EkfRioConfig::DEFAULT>(Noise_PSDs)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::NOISE_PSDS, EkfRioConfig::DEFAULT>(Noise_PSDs)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIALIZATION, EkfRioConfig::DEFAULT> Initialization("Initialization", "", 0, 10, true, &EkfRioConfig::DEFAULT::initialization);
//#line 105 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __min__.T_init = 0.0;
//#line 105 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __max__.T_init = 100.0;
//#line 105 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __default__.T_init = 10.0;
//#line 105 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      Initialization.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("T_init", "double", 0, "Initialization duration in sec for IMU data averaging", "", &EkfRioConfig::T_init)));
//#line 105 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_ekf_rio/ekf_rio.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("T_init", "double", 0, "Initialization duration in sec for IMU data averaging", "", &EkfRioConfig::T_init)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Initialization.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIALIZATION, EkfRioConfig::DEFAULT>(Initialization)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::INITIALIZATION, EkfRioConfig::DEFAULT>(Initialization)));
EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::RADAR_EGO_VELOCITY_ESTIMATOR, EkfRioConfig::DEFAULT> Radar_Ego_Velocity_Estimator("Radar_Ego_Velocity_Estimator", "", 0, 11, true, &EkfRioConfig::DEFAULT::radar_ego_velocity_estimator);
//#line 9 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.min_dist = 0.0;
//#line 9 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.min_dist = 100.0;
//#line 9 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.min_dist = 0.25;
//#line 9 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("min_dist", "double", 0, "Min distance of targets", "", &EkfRioConfig::min_dist)));
//#line 9 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("min_dist", "double", 0, "Min distance of targets", "", &EkfRioConfig::min_dist)));
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_dist = 0.0;
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_dist = 1000.0;
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_dist = 100.0;
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_dist", "double", 0, "Max distance of targets", "", &EkfRioConfig::max_dist)));
//#line 10 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_dist", "double", 0, "Max distance of targets", "", &EkfRioConfig::max_dist)));
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.min_db = 0.0;
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.min_db = 50.0;
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.min_db = 5.0;
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("min_db", "double", 0, "Min dB of targets", "", &EkfRioConfig::min_db)));
//#line 11 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("min_db", "double", 0, "Min dB of targets", "", &EkfRioConfig::min_db)));
//#line 12 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.elevation_thresh_deg = 0.0;
//#line 12 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.elevation_thresh_deg = 100.0;
//#line 12 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.elevation_thresh_deg = 60.0;
//#line 12 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("elevation_thresh_deg", "double", 0, "Absolute elevation angle threshold", "", &EkfRioConfig::elevation_thresh_deg)));
//#line 12 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("elevation_thresh_deg", "double", 0, "Absolute elevation angle threshold", "", &EkfRioConfig::elevation_thresh_deg)));
//#line 13 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.azimuth_thresh_deg = 0.0;
//#line 13 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.azimuth_thresh_deg = 100.0;
//#line 13 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.azimuth_thresh_deg = 60.0;
//#line 13 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("azimuth_thresh_deg", "double", 0, "Absolute azimuth angle threshold", "", &EkfRioConfig::azimuth_thresh_deg)));
//#line 13 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("azimuth_thresh_deg", "double", 0, "Absolute azimuth angle threshold", "", &EkfRioConfig::azimuth_thresh_deg)));
//#line 14 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.filter_min_z = -1000.0;
//#line 14 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.filter_min_z = 1000.0;
//#line 14 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.filter_min_z = -100.0;
//#line 14 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("filter_min_z", "double", 0, "", "", &EkfRioConfig::filter_min_z)));
//#line 14 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("filter_min_z", "double", 0, "", "", &EkfRioConfig::filter_min_z)));
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.filter_max_z = -1000.0;
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.filter_max_z = 1000.0;
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.filter_max_z = 100.0;
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("filter_max_z", "double", 0, "", "", &EkfRioConfig::filter_max_z)));
//#line 15 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("filter_max_z", "double", 0, "", "", &EkfRioConfig::filter_max_z)));
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.doppler_velocity_correction_factor = 0.0;
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.doppler_velocity_correction_factor = 2.0;
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.doppler_velocity_correction_factor = 1.0;
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("doppler_velocity_correction_factor", "double", 0, "Correction factor of Doppler velocity measurements", "", &EkfRioConfig::doppler_velocity_correction_factor)));
//#line 16 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("doppler_velocity_correction_factor", "double", 0, "Correction factor of Doppler velocity measurements", "", &EkfRioConfig::doppler_velocity_correction_factor)));
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.thresh_zero_velocity = 0.0;
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.thresh_zero_velocity = 10.0;
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.thresh_zero_velocity = 0.05;
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("thresh_zero_velocity", "double", 0, "Threshold for zero velocity detection", "", &EkfRioConfig::thresh_zero_velocity)));
//#line 18 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("thresh_zero_velocity", "double", 0, "Threshold for zero velocity detection", "", &EkfRioConfig::thresh_zero_velocity)));
//#line 19 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.allowed_outlier_percentage = 0.0;
//#line 19 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.allowed_outlier_percentage = 1.0;
//#line 19 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.allowed_outlier_percentage = 0.75;
//#line 19 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("allowed_outlier_percentage", "double", 0, "Percentage of allowed outlier for detection", "", &EkfRioConfig::allowed_outlier_percentage)));
//#line 19 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("allowed_outlier_percentage", "double", 0, "Percentage of allowed outlier for detection", "", &EkfRioConfig::allowed_outlier_percentage)));
//#line 20 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_zero_velocity_x = 0.0;
//#line 20 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_zero_velocity_x = 10.0;
//#line 20 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_zero_velocity_x = 0.01;
//#line 20 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_zero_velocity_x", "double", 0, "Sigma for zero velocity v_x", "", &EkfRioConfig::sigma_zero_velocity_x)));
//#line 20 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_zero_velocity_x", "double", 0, "Sigma for zero velocity v_x", "", &EkfRioConfig::sigma_zero_velocity_x)));
//#line 21 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_zero_velocity_y = 0.0;
//#line 21 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_zero_velocity_y = 10.0;
//#line 21 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_zero_velocity_y = 0.01;
//#line 21 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_zero_velocity_y", "double", 0, "Sigma for zero velocity v_y", "", &EkfRioConfig::sigma_zero_velocity_y)));
//#line 21 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_zero_velocity_y", "double", 0, "Sigma for zero velocity v_y", "", &EkfRioConfig::sigma_zero_velocity_y)));
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_zero_velocity_z = 0.0;
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_zero_velocity_z = 10.0;
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_zero_velocity_z = 0.01;
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_zero_velocity_z", "double", 0, "Sigma for zero velocity v_z", "", &EkfRioConfig::sigma_zero_velocity_z)));
//#line 22 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_zero_velocity_z", "double", 0, "Sigma for zero velocity v_z", "", &EkfRioConfig::sigma_zero_velocity_z)));
//#line 24 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_offset_radar_x = 0.0;
//#line 24 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_offset_radar_x = 10.0;
//#line 24 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_offset_radar_x = 0.0;
//#line 24 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_offset_radar_x", "double", 0, "Sigma offset x", "", &EkfRioConfig::sigma_offset_radar_x)));
//#line 24 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_offset_radar_x", "double", 0, "Sigma offset x", "", &EkfRioConfig::sigma_offset_radar_x)));
//#line 25 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_offset_radar_y = 0.0;
//#line 25 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_offset_radar_y = 10.0;
//#line 25 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_offset_radar_y = 0.0;
//#line 25 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_offset_radar_y", "double", 0, "Sigma offset y", "", &EkfRioConfig::sigma_offset_radar_y)));
//#line 25 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_offset_radar_y", "double", 0, "Sigma offset y", "", &EkfRioConfig::sigma_offset_radar_y)));
//#line 26 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_offset_radar_z = 0.0;
//#line 26 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_offset_radar_z = 10.0;
//#line 26 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_offset_radar_z = 0.0;
//#line 26 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_offset_radar_z", "double", 0, "Sigma offset z", "", &EkfRioConfig::sigma_offset_radar_z)));
//#line 26 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_offset_radar_z", "double", 0, "Sigma offset z", "", &EkfRioConfig::sigma_offset_radar_z)));
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_sigma_x = 0.0;
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_sigma_x = 10.0;
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_sigma_x = 0.1;
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_sigma_x", "double", 0, "Max sigma for valid result", "", &EkfRioConfig::max_sigma_x)));
//#line 28 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_sigma_x", "double", 0, "Max sigma for valid result", "", &EkfRioConfig::max_sigma_x)));
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_sigma_y = 0.0;
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_sigma_y = 10.0;
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_sigma_y = 0.1;
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_sigma_y", "double", 0, "Max sigma for valid result", "", &EkfRioConfig::max_sigma_y)));
//#line 29 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_sigma_y", "double", 0, "Max sigma for valid result", "", &EkfRioConfig::max_sigma_y)));
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_sigma_z = 0.0;
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_sigma_z = 10.0;
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_sigma_z = 0.9;
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_sigma_z", "double", 0, "Max sigma for valid result", "", &EkfRioConfig::max_sigma_z)));
//#line 30 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_sigma_z", "double", 0, "Max sigma for valid result", "", &EkfRioConfig::max_sigma_z)));
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_r_cond = 0.0;
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_r_cond = 10000.0;
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_r_cond = 1000.0;
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_r_cond", "double", 0, "Max condition number for LSQ solution attempt", "", &EkfRioConfig::max_r_cond)));
//#line 31 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("max_r_cond", "double", 0, "Max condition number for LSQ solution attempt", "", &EkfRioConfig::max_r_cond)));
//#line 32 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.use_cholesky_instead_of_bdcsvd = 0;
//#line 32 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.use_cholesky_instead_of_bdcsvd = 1;
//#line 32 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.use_cholesky_instead_of_bdcsvd = 1;
//#line 32 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("use_cholesky_instead_of_bdcsvd", "bool", 0, "Faster but less stable", "", &EkfRioConfig::use_cholesky_instead_of_bdcsvd)));
//#line 32 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("use_cholesky_instead_of_bdcsvd", "bool", 0, "Faster but less stable", "", &EkfRioConfig::use_cholesky_instead_of_bdcsvd)));
//#line 34 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.use_ransac = 0;
//#line 34 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.use_ransac = 1;
//#line 34 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.use_ransac = 1;
//#line 34 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("use_ransac", "bool", 0, "Enables RANSAC LSQ", "", &EkfRioConfig::use_ransac)));
//#line 34 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("use_ransac", "bool", 0, "Enables RANSAC LSQ", "", &EkfRioConfig::use_ransac)));
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.outlier_prob = 0.0;
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.outlier_prob = 1.0;
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.outlier_prob = 0.4;
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("outlier_prob", "double", 0, "Outlier probability", "", &EkfRioConfig::outlier_prob)));
//#line 35 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("outlier_prob", "double", 0, "Outlier probability", "", &EkfRioConfig::outlier_prob)));
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.success_prob = 0.0;
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.success_prob = 1.0;
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.success_prob = 0.9999;
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("success_prob", "double", 0, "Probability for RANSAC success", "", &EkfRioConfig::success_prob)));
//#line 36 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("success_prob", "double", 0, "Probability for RANSAC success", "", &EkfRioConfig::success_prob)));
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.N_ransac_points = 3;
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.N_ransac_points = 20;
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.N_ransac_points = 3;
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<int>("N_ransac_points", "int", 0, "Number of RANSAC points (at least 3 required)", "", &EkfRioConfig::N_ransac_points)));
//#line 37 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<int>("N_ransac_points", "int", 0, "Number of RANSAC points (at least 3 required)", "", &EkfRioConfig::N_ransac_points)));
//#line 38 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.inlier_thresh = 0.0;
//#line 38 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.inlier_thresh = 2.0;
//#line 38 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.inlier_thresh = 0.15;
//#line 38 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("inlier_thresh", "double", 0, "Inlier threshold", "", &EkfRioConfig::inlier_thresh)));
//#line 38 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("inlier_thresh", "double", 0, "Inlier threshold", "", &EkfRioConfig::inlier_thresh)));
//#line 40 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.use_odr = 0;
//#line 40 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.use_odr = 1;
//#line 40 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.use_odr = 1;
//#line 40 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("use_odr", "bool", 0, "Enables subsequent ODR refinement", "", &EkfRioConfig::use_odr)));
//#line 40 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<bool>("use_odr", "bool", 0, "Enables subsequent ODR refinement", "", &EkfRioConfig::use_odr)));
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.min_speed_odr = 0.0;
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.min_speed_odr = 100.0;
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.min_speed_odr = 4.0;
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("min_speed_odr", "double", 0, "", "", &EkfRioConfig::min_speed_odr)));
//#line 41 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("min_speed_odr", "double", 0, "", "", &EkfRioConfig::min_speed_odr)));
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_v_d = 0.0;
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_v_d = 10.0;
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_v_d = 0.125;
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_v_d", "double", 0, "Sigma of Doppler velocity measurements used in ODR refinement", "", &EkfRioConfig::sigma_v_d)));
//#line 42 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("sigma_v_d", "double", 0, "Sigma of Doppler velocity measurements used in ODR refinement", "", &EkfRioConfig::sigma_v_d)));
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.model_noise_offset_deg = 0.0;
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.model_noise_offset_deg = 100.0;
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.model_noise_offset_deg = 1.0;
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("model_noise_offset_deg", "double", 0, "Min noise azimuth and elevation", "", &EkfRioConfig::model_noise_offset_deg)));
//#line 43 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("model_noise_offset_deg", "double", 0, "Min noise azimuth and elevation", "", &EkfRioConfig::model_noise_offset_deg)));
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.model_noise_scale_deg = 0.0;
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.model_noise_scale_deg = 100.0;
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.model_noise_scale_deg = 1.0;
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("model_noise_scale_deg", "double", 0, "Noise scaling", "", &EkfRioConfig::model_noise_scale_deg)));
//#line 44 "/home/ypandos/work/rostest/src/ekf_rio/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(EkfRioConfig::AbstractParamDescriptionConstPtr(new EkfRioConfig::ParamDescription<double>("model_noise_scale_deg", "double", 0, "Noise scaling", "", &EkfRioConfig::model_noise_scale_deg)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Radar_Ego_Velocity_Estimator.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::RADAR_EGO_VELOCITY_ESTIMATOR, EkfRioConfig::DEFAULT>(Radar_Ego_Velocity_Estimator)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT::RADAR_EGO_VELOCITY_ESTIMATOR, EkfRioConfig::DEFAULT>(Radar_Ego_Velocity_Estimator)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EkfRioConfig::AbstractGroupDescriptionConstPtr(new EkfRioConfig::GroupDescription<EkfRioConfig::DEFAULT, EkfRioConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<EkfRioConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<EkfRioConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<EkfRioConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    EkfRioConfig __max__;
    EkfRioConfig __min__;
    EkfRioConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const EkfRioConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static EkfRioConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &EkfRioConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const EkfRioConfig &EkfRioConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const EkfRioConfig &EkfRioConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const EkfRioConfig &EkfRioConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<EkfRioConfig::AbstractParamDescriptionConstPtr> &EkfRioConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<EkfRioConfig::AbstractGroupDescriptionConstPtr> &EkfRioConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const EkfRioConfigStatics *EkfRioConfig::__get_statics__()
  {
    const static EkfRioConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = EkfRioConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __EKFRIORECONFIGURATOR_H__
