// Generated by gencpp from file ekf_rio/EkfRioCovariance.msg
// DO NOT EDIT!


#ifndef EKF_RIO_MESSAGE_EKFRIOCOVARIANCE_H
#define EKF_RIO_MESSAGE_EKFRIOCOVARIANCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace ekf_rio
{
template <class ContainerAllocator>
struct EkfRioCovariance_
{
  typedef EkfRioCovariance_<ContainerAllocator> Type;

  EkfRioCovariance_()
    : header()
    , sigma_p()
    , sigma_v()
    , sigma_eul_deg()
    , sigma_b_a()
    , sigma_b_g_deg()
    , sigma_alt(0.0)
    , sigma_l_b_r()
    , sigma_eul_b_r_deg()  {
    }
  EkfRioCovariance_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sigma_p(_alloc)
    , sigma_v(_alloc)
    , sigma_eul_deg(_alloc)
    , sigma_b_a(_alloc)
    , sigma_b_g_deg(_alloc)
    , sigma_alt(0.0)
    , sigma_l_b_r(_alloc)
    , sigma_eul_b_r_deg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sigma_p_type;
  _sigma_p_type sigma_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sigma_v_type;
  _sigma_v_type sigma_v;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sigma_eul_deg_type;
  _sigma_eul_deg_type sigma_eul_deg;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sigma_b_a_type;
  _sigma_b_a_type sigma_b_a;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sigma_b_g_deg_type;
  _sigma_b_g_deg_type sigma_b_g_deg;

   typedef float _sigma_alt_type;
  _sigma_alt_type sigma_alt;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sigma_l_b_r_type;
  _sigma_l_b_r_type sigma_l_b_r;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sigma_eul_b_r_deg_type;
  _sigma_eul_b_r_deg_type sigma_eul_b_r_deg;





  typedef boost::shared_ptr< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> const> ConstPtr;

}; // struct EkfRioCovariance_

typedef ::ekf_rio::EkfRioCovariance_<std::allocator<void> > EkfRioCovariance;

typedef boost::shared_ptr< ::ekf_rio::EkfRioCovariance > EkfRioCovariancePtr;
typedef boost::shared_ptr< ::ekf_rio::EkfRioCovariance const> EkfRioCovarianceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ekf_rio::EkfRioCovariance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ekf_rio::EkfRioCovariance_<ContainerAllocator1> & lhs, const ::ekf_rio::EkfRioCovariance_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sigma_p == rhs.sigma_p &&
    lhs.sigma_v == rhs.sigma_v &&
    lhs.sigma_eul_deg == rhs.sigma_eul_deg &&
    lhs.sigma_b_a == rhs.sigma_b_a &&
    lhs.sigma_b_g_deg == rhs.sigma_b_g_deg &&
    lhs.sigma_alt == rhs.sigma_alt &&
    lhs.sigma_l_b_r == rhs.sigma_l_b_r &&
    lhs.sigma_eul_b_r_deg == rhs.sigma_eul_b_r_deg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ekf_rio::EkfRioCovariance_<ContainerAllocator1> & lhs, const ::ekf_rio::EkfRioCovariance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ekf_rio

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd1c27053c1dd5f05552831fb830514c";
  }

  static const char* value(const ::ekf_rio::EkfRioCovariance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd1c27053c1dd5f0ULL;
  static const uint64_t static_value2 = 0x5552831fb830514cULL;
};

template<class ContainerAllocator>
struct DataType< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ekf_rio/EkfRioCovariance";
  }

  static const char* value(const ::ekf_rio::EkfRioCovariance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"geometry_msgs/Vector3 sigma_p\n"
"geometry_msgs/Vector3 sigma_v\n"
"geometry_msgs/Vector3 sigma_eul_deg\n"
"geometry_msgs/Vector3 sigma_b_a\n"
"geometry_msgs/Vector3 sigma_b_g_deg\n"
"float32 sigma_alt\n"
"geometry_msgs/Vector3 sigma_l_b_r\n"
"geometry_msgs/Vector3 sigma_eul_b_r_deg\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ekf_rio::EkfRioCovariance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sigma_p);
      stream.next(m.sigma_v);
      stream.next(m.sigma_eul_deg);
      stream.next(m.sigma_b_a);
      stream.next(m.sigma_b_g_deg);
      stream.next(m.sigma_alt);
      stream.next(m.sigma_l_b_r);
      stream.next(m.sigma_eul_b_r_deg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EkfRioCovariance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ekf_rio::EkfRioCovariance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ekf_rio::EkfRioCovariance_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sigma_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sigma_p);
    s << indent << "sigma_v: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sigma_v);
    s << indent << "sigma_eul_deg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sigma_eul_deg);
    s << indent << "sigma_b_a: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sigma_b_a);
    s << indent << "sigma_b_g_deg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sigma_b_g_deg);
    s << indent << "sigma_alt: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_alt);
    s << indent << "sigma_l_b_r: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sigma_l_b_r);
    s << indent << "sigma_eul_b_r_deg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sigma_eul_b_r_deg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EKF_RIO_MESSAGE_EKFRIOCOVARIANCE_H
