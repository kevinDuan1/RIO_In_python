//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the radar_ego_velocity_estimation package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __radar_ego_velocity_estimation__RADAREGOVELOCITYESTIMATORCONFIG_H__
#define __radar_ego_velocity_estimation__RADAREGOVELOCITYESTIMATORCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace radar_ego_velocity_estimation
{
  class RadarEgoVelocityEstimatorConfigStatics;

  class RadarEgoVelocityEstimatorConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(RadarEgoVelocityEstimatorConfig &config, const RadarEgoVelocityEstimatorConfig &max, const RadarEgoVelocityEstimatorConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const RadarEgoVelocityEstimatorConfig &config1, const RadarEgoVelocityEstimatorConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, RadarEgoVelocityEstimatorConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const RadarEgoVelocityEstimatorConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RadarEgoVelocityEstimatorConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const RadarEgoVelocityEstimatorConfig &config) const = 0;
      virtual void getValue(const RadarEgoVelocityEstimatorConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T RadarEgoVelocityEstimatorConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T RadarEgoVelocityEstimatorConfig::* field;

      virtual void clamp(RadarEgoVelocityEstimatorConfig &config, const RadarEgoVelocityEstimatorConfig &max, const RadarEgoVelocityEstimatorConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const RadarEgoVelocityEstimatorConfig &config1, const RadarEgoVelocityEstimatorConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, RadarEgoVelocityEstimatorConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const RadarEgoVelocityEstimatorConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RadarEgoVelocityEstimatorConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const RadarEgoVelocityEstimatorConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const RadarEgoVelocityEstimatorConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, RadarEgoVelocityEstimatorConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, RadarEgoVelocityEstimatorConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<RadarEgoVelocityEstimatorConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(RadarEgoVelocityEstimatorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class RADAR_EGO_VELOCITY_ESTIMATOR
{
  public:
    RADAR_EGO_VELOCITY_ESTIMATOR()
    {
      state = true;
      name = "Radar_Ego_Velocity_Estimator";
    }

    void setParams(RadarEgoVelocityEstimatorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_dist"==(*_i)->name){min_dist = boost::any_cast<double>(val);}
        if("max_dist"==(*_i)->name){max_dist = boost::any_cast<double>(val);}
        if("min_db"==(*_i)->name){min_db = boost::any_cast<double>(val);}
        if("elevation_thresh_deg"==(*_i)->name){elevation_thresh_deg = boost::any_cast<double>(val);}
        if("azimuth_thresh_deg"==(*_i)->name){azimuth_thresh_deg = boost::any_cast<double>(val);}
        if("filter_min_z"==(*_i)->name){filter_min_z = boost::any_cast<double>(val);}
        if("filter_max_z"==(*_i)->name){filter_max_z = boost::any_cast<double>(val);}
        if("doppler_velocity_correction_factor"==(*_i)->name){doppler_velocity_correction_factor = boost::any_cast<double>(val);}
        if("thresh_zero_velocity"==(*_i)->name){thresh_zero_velocity = boost::any_cast<double>(val);}
        if("allowed_outlier_percentage"==(*_i)->name){allowed_outlier_percentage = boost::any_cast<double>(val);}
        if("sigma_zero_velocity_x"==(*_i)->name){sigma_zero_velocity_x = boost::any_cast<double>(val);}
        if("sigma_zero_velocity_y"==(*_i)->name){sigma_zero_velocity_y = boost::any_cast<double>(val);}
        if("sigma_zero_velocity_z"==(*_i)->name){sigma_zero_velocity_z = boost::any_cast<double>(val);}
        if("sigma_offset_radar_x"==(*_i)->name){sigma_offset_radar_x = boost::any_cast<double>(val);}
        if("sigma_offset_radar_y"==(*_i)->name){sigma_offset_radar_y = boost::any_cast<double>(val);}
        if("sigma_offset_radar_z"==(*_i)->name){sigma_offset_radar_z = boost::any_cast<double>(val);}
        if("max_sigma_x"==(*_i)->name){max_sigma_x = boost::any_cast<double>(val);}
        if("max_sigma_y"==(*_i)->name){max_sigma_y = boost::any_cast<double>(val);}
        if("max_sigma_z"==(*_i)->name){max_sigma_z = boost::any_cast<double>(val);}
        if("max_r_cond"==(*_i)->name){max_r_cond = boost::any_cast<double>(val);}
        if("use_cholesky_instead_of_bdcsvd"==(*_i)->name){use_cholesky_instead_of_bdcsvd = boost::any_cast<bool>(val);}
        if("use_ransac"==(*_i)->name){use_ransac = boost::any_cast<bool>(val);}
        if("outlier_prob"==(*_i)->name){outlier_prob = boost::any_cast<double>(val);}
        if("success_prob"==(*_i)->name){success_prob = boost::any_cast<double>(val);}
        if("N_ransac_points"==(*_i)->name){N_ransac_points = boost::any_cast<int>(val);}
        if("inlier_thresh"==(*_i)->name){inlier_thresh = boost::any_cast<double>(val);}
        if("use_odr"==(*_i)->name){use_odr = boost::any_cast<bool>(val);}
        if("min_speed_odr"==(*_i)->name){min_speed_odr = boost::any_cast<double>(val);}
        if("sigma_v_d"==(*_i)->name){sigma_v_d = boost::any_cast<double>(val);}
        if("model_noise_offset_deg"==(*_i)->name){model_noise_offset_deg = boost::any_cast<double>(val);}
        if("model_noise_scale_deg"==(*_i)->name){model_noise_scale_deg = boost::any_cast<double>(val);}
      }
    }

    double min_dist;
double max_dist;
double min_db;
double elevation_thresh_deg;
double azimuth_thresh_deg;
double filter_min_z;
double filter_max_z;
double doppler_velocity_correction_factor;
double thresh_zero_velocity;
double allowed_outlier_percentage;
double sigma_zero_velocity_x;
double sigma_zero_velocity_y;
double sigma_zero_velocity_z;
double sigma_offset_radar_x;
double sigma_offset_radar_y;
double sigma_offset_radar_z;
double max_sigma_x;
double max_sigma_y;
double max_sigma_z;
double max_r_cond;
bool use_cholesky_instead_of_bdcsvd;
bool use_ransac;
double outlier_prob;
double success_prob;
int N_ransac_points;
double inlier_thresh;
bool use_odr;
double min_speed_odr;
double sigma_v_d;
double model_noise_offset_deg;
double model_noise_scale_deg;

    bool state;
    std::string name;

    
}radar_ego_velocity_estimator;

}groups;



//#line 9 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double min_dist;
//#line 10 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_dist;
//#line 11 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double min_db;
//#line 12 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double elevation_thresh_deg;
//#line 13 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double azimuth_thresh_deg;
//#line 14 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double filter_min_z;
//#line 15 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double filter_max_z;
//#line 16 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double doppler_velocity_correction_factor;
//#line 18 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double thresh_zero_velocity;
//#line 19 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double allowed_outlier_percentage;
//#line 20 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_zero_velocity_x;
//#line 21 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_zero_velocity_y;
//#line 22 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_zero_velocity_z;
//#line 24 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_offset_radar_x;
//#line 25 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_offset_radar_y;
//#line 26 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_offset_radar_z;
//#line 28 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_sigma_x;
//#line 29 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_sigma_y;
//#line 30 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_sigma_z;
//#line 31 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double max_r_cond;
//#line 32 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      bool use_cholesky_instead_of_bdcsvd;
//#line 34 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      bool use_ransac;
//#line 35 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double outlier_prob;
//#line 36 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double success_prob;
//#line 37 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      int N_ransac_points;
//#line 38 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double inlier_thresh;
//#line 40 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      bool use_odr;
//#line 41 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double min_speed_odr;
//#line 42 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double sigma_v_d;
//#line 43 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double model_noise_offset_deg;
//#line 44 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      double model_noise_scale_deg;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("RadarEgoVelocityEstimatorConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const RadarEgoVelocityEstimatorConfig &__max__ = __getMax__();
      const RadarEgoVelocityEstimatorConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const RadarEgoVelocityEstimatorConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const RadarEgoVelocityEstimatorConfig &__getDefault__();
    static const RadarEgoVelocityEstimatorConfig &__getMax__();
    static const RadarEgoVelocityEstimatorConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const RadarEgoVelocityEstimatorConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void RadarEgoVelocityEstimatorConfig::ParamDescription<std::string>::clamp(RadarEgoVelocityEstimatorConfig &config, const RadarEgoVelocityEstimatorConfig &max, const RadarEgoVelocityEstimatorConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class RadarEgoVelocityEstimatorConfigStatics
  {
    friend class RadarEgoVelocityEstimatorConfig;

    RadarEgoVelocityEstimatorConfigStatics()
    {
RadarEgoVelocityEstimatorConfig::GroupDescription<RadarEgoVelocityEstimatorConfig::DEFAULT, RadarEgoVelocityEstimatorConfig> Default("Default", "", 0, 0, true, &RadarEgoVelocityEstimatorConfig::groups);
RadarEgoVelocityEstimatorConfig::GroupDescription<RadarEgoVelocityEstimatorConfig::DEFAULT::RADAR_EGO_VELOCITY_ESTIMATOR, RadarEgoVelocityEstimatorConfig::DEFAULT> Radar_Ego_Velocity_Estimator("Radar_Ego_Velocity_Estimator", "", 0, 1, true, &RadarEgoVelocityEstimatorConfig::DEFAULT::radar_ego_velocity_estimator);
//#line 9 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.min_dist = 0.0;
//#line 9 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.min_dist = 100.0;
//#line 9 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.min_dist = 0.25;
//#line 9 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("min_dist", "double", 0, "Min distance of targets", "", &RadarEgoVelocityEstimatorConfig::min_dist)));
//#line 9 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("min_dist", "double", 0, "Min distance of targets", "", &RadarEgoVelocityEstimatorConfig::min_dist)));
//#line 10 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_dist = 0.0;
//#line 10 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_dist = 1000.0;
//#line 10 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_dist = 100.0;
//#line 10 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_dist", "double", 0, "Max distance of targets", "", &RadarEgoVelocityEstimatorConfig::max_dist)));
//#line 10 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_dist", "double", 0, "Max distance of targets", "", &RadarEgoVelocityEstimatorConfig::max_dist)));
//#line 11 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.min_db = 0.0;
//#line 11 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.min_db = 50.0;
//#line 11 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.min_db = 5.0;
//#line 11 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("min_db", "double", 0, "Min dB of targets", "", &RadarEgoVelocityEstimatorConfig::min_db)));
//#line 11 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("min_db", "double", 0, "Min dB of targets", "", &RadarEgoVelocityEstimatorConfig::min_db)));
//#line 12 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.elevation_thresh_deg = 0.0;
//#line 12 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.elevation_thresh_deg = 100.0;
//#line 12 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.elevation_thresh_deg = 60.0;
//#line 12 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("elevation_thresh_deg", "double", 0, "Absolute elevation angle threshold", "", &RadarEgoVelocityEstimatorConfig::elevation_thresh_deg)));
//#line 12 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("elevation_thresh_deg", "double", 0, "Absolute elevation angle threshold", "", &RadarEgoVelocityEstimatorConfig::elevation_thresh_deg)));
//#line 13 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.azimuth_thresh_deg = 0.0;
//#line 13 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.azimuth_thresh_deg = 100.0;
//#line 13 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.azimuth_thresh_deg = 60.0;
//#line 13 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("azimuth_thresh_deg", "double", 0, "Absolute azimuth angle threshold", "", &RadarEgoVelocityEstimatorConfig::azimuth_thresh_deg)));
//#line 13 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("azimuth_thresh_deg", "double", 0, "Absolute azimuth angle threshold", "", &RadarEgoVelocityEstimatorConfig::azimuth_thresh_deg)));
//#line 14 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.filter_min_z = -1000.0;
//#line 14 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.filter_min_z = 1000.0;
//#line 14 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.filter_min_z = -100.0;
//#line 14 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("filter_min_z", "double", 0, "", "", &RadarEgoVelocityEstimatorConfig::filter_min_z)));
//#line 14 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("filter_min_z", "double", 0, "", "", &RadarEgoVelocityEstimatorConfig::filter_min_z)));
//#line 15 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.filter_max_z = -1000.0;
//#line 15 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.filter_max_z = 1000.0;
//#line 15 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.filter_max_z = 100.0;
//#line 15 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("filter_max_z", "double", 0, "", "", &RadarEgoVelocityEstimatorConfig::filter_max_z)));
//#line 15 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("filter_max_z", "double", 0, "", "", &RadarEgoVelocityEstimatorConfig::filter_max_z)));
//#line 16 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.doppler_velocity_correction_factor = 0.0;
//#line 16 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.doppler_velocity_correction_factor = 2.0;
//#line 16 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.doppler_velocity_correction_factor = 1.0;
//#line 16 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("doppler_velocity_correction_factor", "double", 0, "Correction factor of Doppler velocity measurements", "", &RadarEgoVelocityEstimatorConfig::doppler_velocity_correction_factor)));
//#line 16 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("doppler_velocity_correction_factor", "double", 0, "Correction factor of Doppler velocity measurements", "", &RadarEgoVelocityEstimatorConfig::doppler_velocity_correction_factor)));
//#line 18 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.thresh_zero_velocity = 0.0;
//#line 18 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.thresh_zero_velocity = 10.0;
//#line 18 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.thresh_zero_velocity = 0.05;
//#line 18 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("thresh_zero_velocity", "double", 0, "Threshold for zero velocity detection", "", &RadarEgoVelocityEstimatorConfig::thresh_zero_velocity)));
//#line 18 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("thresh_zero_velocity", "double", 0, "Threshold for zero velocity detection", "", &RadarEgoVelocityEstimatorConfig::thresh_zero_velocity)));
//#line 19 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.allowed_outlier_percentage = 0.0;
//#line 19 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.allowed_outlier_percentage = 1.0;
//#line 19 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.allowed_outlier_percentage = 0.75;
//#line 19 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("allowed_outlier_percentage", "double", 0, "Percentage of allowed outlier for detection", "", &RadarEgoVelocityEstimatorConfig::allowed_outlier_percentage)));
//#line 19 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("allowed_outlier_percentage", "double", 0, "Percentage of allowed outlier for detection", "", &RadarEgoVelocityEstimatorConfig::allowed_outlier_percentage)));
//#line 20 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_zero_velocity_x = 0.0;
//#line 20 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_zero_velocity_x = 10.0;
//#line 20 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_zero_velocity_x = 0.01;
//#line 20 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_zero_velocity_x", "double", 0, "Sigma for zero velocity v_x", "", &RadarEgoVelocityEstimatorConfig::sigma_zero_velocity_x)));
//#line 20 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_zero_velocity_x", "double", 0, "Sigma for zero velocity v_x", "", &RadarEgoVelocityEstimatorConfig::sigma_zero_velocity_x)));
//#line 21 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_zero_velocity_y = 0.0;
//#line 21 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_zero_velocity_y = 10.0;
//#line 21 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_zero_velocity_y = 0.01;
//#line 21 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_zero_velocity_y", "double", 0, "Sigma for zero velocity v_y", "", &RadarEgoVelocityEstimatorConfig::sigma_zero_velocity_y)));
//#line 21 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_zero_velocity_y", "double", 0, "Sigma for zero velocity v_y", "", &RadarEgoVelocityEstimatorConfig::sigma_zero_velocity_y)));
//#line 22 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_zero_velocity_z = 0.0;
//#line 22 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_zero_velocity_z = 10.0;
//#line 22 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_zero_velocity_z = 0.01;
//#line 22 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_zero_velocity_z", "double", 0, "Sigma for zero velocity v_z", "", &RadarEgoVelocityEstimatorConfig::sigma_zero_velocity_z)));
//#line 22 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_zero_velocity_z", "double", 0, "Sigma for zero velocity v_z", "", &RadarEgoVelocityEstimatorConfig::sigma_zero_velocity_z)));
//#line 24 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_offset_radar_x = 0.0;
//#line 24 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_offset_radar_x = 10.0;
//#line 24 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_offset_radar_x = 0.0;
//#line 24 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_offset_radar_x", "double", 0, "Sigma offset x", "", &RadarEgoVelocityEstimatorConfig::sigma_offset_radar_x)));
//#line 24 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_offset_radar_x", "double", 0, "Sigma offset x", "", &RadarEgoVelocityEstimatorConfig::sigma_offset_radar_x)));
//#line 25 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_offset_radar_y = 0.0;
//#line 25 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_offset_radar_y = 10.0;
//#line 25 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_offset_radar_y = 0.0;
//#line 25 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_offset_radar_y", "double", 0, "Sigma offset y", "", &RadarEgoVelocityEstimatorConfig::sigma_offset_radar_y)));
//#line 25 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_offset_radar_y", "double", 0, "Sigma offset y", "", &RadarEgoVelocityEstimatorConfig::sigma_offset_radar_y)));
//#line 26 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_offset_radar_z = 0.0;
//#line 26 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_offset_radar_z = 10.0;
//#line 26 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_offset_radar_z = 0.0;
//#line 26 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_offset_radar_z", "double", 0, "Sigma offset z", "", &RadarEgoVelocityEstimatorConfig::sigma_offset_radar_z)));
//#line 26 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_offset_radar_z", "double", 0, "Sigma offset z", "", &RadarEgoVelocityEstimatorConfig::sigma_offset_radar_z)));
//#line 28 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_sigma_x = 0.0;
//#line 28 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_sigma_x = 10.0;
//#line 28 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_sigma_x = 0.1;
//#line 28 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_sigma_x", "double", 0, "Max sigma for valid result", "", &RadarEgoVelocityEstimatorConfig::max_sigma_x)));
//#line 28 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_sigma_x", "double", 0, "Max sigma for valid result", "", &RadarEgoVelocityEstimatorConfig::max_sigma_x)));
//#line 29 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_sigma_y = 0.0;
//#line 29 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_sigma_y = 10.0;
//#line 29 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_sigma_y = 0.1;
//#line 29 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_sigma_y", "double", 0, "Max sigma for valid result", "", &RadarEgoVelocityEstimatorConfig::max_sigma_y)));
//#line 29 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_sigma_y", "double", 0, "Max sigma for valid result", "", &RadarEgoVelocityEstimatorConfig::max_sigma_y)));
//#line 30 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_sigma_z = 0.0;
//#line 30 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_sigma_z = 10.0;
//#line 30 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_sigma_z = 0.9;
//#line 30 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_sigma_z", "double", 0, "Max sigma for valid result", "", &RadarEgoVelocityEstimatorConfig::max_sigma_z)));
//#line 30 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_sigma_z", "double", 0, "Max sigma for valid result", "", &RadarEgoVelocityEstimatorConfig::max_sigma_z)));
//#line 31 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.max_r_cond = 0.0;
//#line 31 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.max_r_cond = 10000.0;
//#line 31 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.max_r_cond = 1000.0;
//#line 31 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_r_cond", "double", 0, "Max condition number for LSQ solution attempt", "", &RadarEgoVelocityEstimatorConfig::max_r_cond)));
//#line 31 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("max_r_cond", "double", 0, "Max condition number for LSQ solution attempt", "", &RadarEgoVelocityEstimatorConfig::max_r_cond)));
//#line 32 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.use_cholesky_instead_of_bdcsvd = 0;
//#line 32 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.use_cholesky_instead_of_bdcsvd = 1;
//#line 32 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.use_cholesky_instead_of_bdcsvd = 1;
//#line 32 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<bool>("use_cholesky_instead_of_bdcsvd", "bool", 0, "Faster but less stable", "", &RadarEgoVelocityEstimatorConfig::use_cholesky_instead_of_bdcsvd)));
//#line 32 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<bool>("use_cholesky_instead_of_bdcsvd", "bool", 0, "Faster but less stable", "", &RadarEgoVelocityEstimatorConfig::use_cholesky_instead_of_bdcsvd)));
//#line 34 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.use_ransac = 0;
//#line 34 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.use_ransac = 1;
//#line 34 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.use_ransac = 1;
//#line 34 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<bool>("use_ransac", "bool", 0, "Enables RANSAC LSQ", "", &RadarEgoVelocityEstimatorConfig::use_ransac)));
//#line 34 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<bool>("use_ransac", "bool", 0, "Enables RANSAC LSQ", "", &RadarEgoVelocityEstimatorConfig::use_ransac)));
//#line 35 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.outlier_prob = 0.0;
//#line 35 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.outlier_prob = 1.0;
//#line 35 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.outlier_prob = 0.4;
//#line 35 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("outlier_prob", "double", 0, "Outlier probability", "", &RadarEgoVelocityEstimatorConfig::outlier_prob)));
//#line 35 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("outlier_prob", "double", 0, "Outlier probability", "", &RadarEgoVelocityEstimatorConfig::outlier_prob)));
//#line 36 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.success_prob = 0.0;
//#line 36 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.success_prob = 1.0;
//#line 36 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.success_prob = 0.9999;
//#line 36 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("success_prob", "double", 0, "Probability for RANSAC success", "", &RadarEgoVelocityEstimatorConfig::success_prob)));
//#line 36 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("success_prob", "double", 0, "Probability for RANSAC success", "", &RadarEgoVelocityEstimatorConfig::success_prob)));
//#line 37 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.N_ransac_points = 3;
//#line 37 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.N_ransac_points = 20;
//#line 37 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.N_ransac_points = 3;
//#line 37 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<int>("N_ransac_points", "int", 0, "Number of RANSAC points (at least 3 required)", "", &RadarEgoVelocityEstimatorConfig::N_ransac_points)));
//#line 37 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<int>("N_ransac_points", "int", 0, "Number of RANSAC points (at least 3 required)", "", &RadarEgoVelocityEstimatorConfig::N_ransac_points)));
//#line 38 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.inlier_thresh = 0.0;
//#line 38 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.inlier_thresh = 2.0;
//#line 38 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.inlier_thresh = 0.15;
//#line 38 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("inlier_thresh", "double", 0, "Inlier threshold", "", &RadarEgoVelocityEstimatorConfig::inlier_thresh)));
//#line 38 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("inlier_thresh", "double", 0, "Inlier threshold", "", &RadarEgoVelocityEstimatorConfig::inlier_thresh)));
//#line 40 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.use_odr = 0;
//#line 40 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.use_odr = 1;
//#line 40 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.use_odr = 1;
//#line 40 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<bool>("use_odr", "bool", 0, "Enables subsequent ODR refinement", "", &RadarEgoVelocityEstimatorConfig::use_odr)));
//#line 40 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<bool>("use_odr", "bool", 0, "Enables subsequent ODR refinement", "", &RadarEgoVelocityEstimatorConfig::use_odr)));
//#line 41 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.min_speed_odr = 0.0;
//#line 41 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.min_speed_odr = 100.0;
//#line 41 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.min_speed_odr = 4.0;
//#line 41 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("min_speed_odr", "double", 0, "", "", &RadarEgoVelocityEstimatorConfig::min_speed_odr)));
//#line 41 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("min_speed_odr", "double", 0, "", "", &RadarEgoVelocityEstimatorConfig::min_speed_odr)));
//#line 42 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.sigma_v_d = 0.0;
//#line 42 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.sigma_v_d = 10.0;
//#line 42 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.sigma_v_d = 0.125;
//#line 42 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_v_d", "double", 0, "Sigma of Doppler velocity measurements used in ODR refinement", "", &RadarEgoVelocityEstimatorConfig::sigma_v_d)));
//#line 42 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("sigma_v_d", "double", 0, "Sigma of Doppler velocity measurements used in ODR refinement", "", &RadarEgoVelocityEstimatorConfig::sigma_v_d)));
//#line 43 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.model_noise_offset_deg = 0.0;
//#line 43 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.model_noise_offset_deg = 100.0;
//#line 43 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.model_noise_offset_deg = 1.0;
//#line 43 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("model_noise_offset_deg", "double", 0, "Min noise azimuth and elevation", "", &RadarEgoVelocityEstimatorConfig::model_noise_offset_deg)));
//#line 43 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("model_noise_offset_deg", "double", 0, "Min noise azimuth and elevation", "", &RadarEgoVelocityEstimatorConfig::model_noise_offset_deg)));
//#line 44 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __min__.model_noise_scale_deg = 0.0;
//#line 44 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __max__.model_noise_scale_deg = 100.0;
//#line 44 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __default__.model_noise_scale_deg = 1.0;
//#line 44 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      Radar_Ego_Velocity_Estimator.abstract_parameters.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("model_noise_scale_deg", "double", 0, "Noise scaling", "", &RadarEgoVelocityEstimatorConfig::model_noise_scale_deg)));
//#line 44 "/home/ypandos/work/rostest/src/reve/radar_ego_velocity_estimator/cfg/cfg_radar_ego_velocity_estimation/radar_ego_velocity_estimator.py"
      __param_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::ParamDescription<double>("model_noise_scale_deg", "double", 0, "Noise scaling", "", &RadarEgoVelocityEstimatorConfig::model_noise_scale_deg)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Radar_Ego_Velocity_Estimator.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(RadarEgoVelocityEstimatorConfig::AbstractGroupDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::GroupDescription<RadarEgoVelocityEstimatorConfig::DEFAULT::RADAR_EGO_VELOCITY_ESTIMATOR, RadarEgoVelocityEstimatorConfig::DEFAULT>(Radar_Ego_Velocity_Estimator)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractGroupDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::GroupDescription<RadarEgoVelocityEstimatorConfig::DEFAULT::RADAR_EGO_VELOCITY_ESTIMATOR, RadarEgoVelocityEstimatorConfig::DEFAULT>(Radar_Ego_Velocity_Estimator)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(RadarEgoVelocityEstimatorConfig::AbstractGroupDescriptionConstPtr(new RadarEgoVelocityEstimatorConfig::GroupDescription<RadarEgoVelocityEstimatorConfig::DEFAULT, RadarEgoVelocityEstimatorConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<RadarEgoVelocityEstimatorConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<RadarEgoVelocityEstimatorConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    RadarEgoVelocityEstimatorConfig __max__;
    RadarEgoVelocityEstimatorConfig __min__;
    RadarEgoVelocityEstimatorConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const RadarEgoVelocityEstimatorConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static RadarEgoVelocityEstimatorConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &RadarEgoVelocityEstimatorConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const RadarEgoVelocityEstimatorConfig &RadarEgoVelocityEstimatorConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const RadarEgoVelocityEstimatorConfig &RadarEgoVelocityEstimatorConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const RadarEgoVelocityEstimatorConfig &RadarEgoVelocityEstimatorConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<RadarEgoVelocityEstimatorConfig::AbstractParamDescriptionConstPtr> &RadarEgoVelocityEstimatorConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<RadarEgoVelocityEstimatorConfig::AbstractGroupDescriptionConstPtr> &RadarEgoVelocityEstimatorConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const RadarEgoVelocityEstimatorConfigStatics *RadarEgoVelocityEstimatorConfig::__get_statics__()
  {
    const static RadarEgoVelocityEstimatorConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = RadarEgoVelocityEstimatorConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __RADAREGOVELOCITYESTIMATORRECONFIGURATOR_H__
